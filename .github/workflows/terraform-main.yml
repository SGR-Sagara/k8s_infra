name: 'Terraform'

on:
  push:
    branches: [ "master" ]
  pull_request:
  
env:
  AWS_ROLE_ASSUME : ${{ secrets.AWS_ROLE_ASSUME }}
  AWS_REGION : "ap-south-1"
  
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    #environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Configure AWS Credentials with GitHub OIDC to improve the security
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{env.AWS_ROLE_ASSUME}}
        role-session-name: project_terra_session
        aws-region: ${{env.AWS_REGION}}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    #- name: Terraform Apply
    #  if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
    #  run: terraform apply -auto-approve -input=false
